import type {Metadata} from "next";
import localFont from "next/font/local";
import {ReactNode} from "react";
import {Navbar} from "@/components";
import { getRefreshToken } from '@/lib/session/session';
import { StoreProvider} from "@/lib/session/SessionContext";
import './globals.css'
import axios from "axios";

const geistSans = localFont({
    src: "./fonts/GeistVF.woff",
    variable: "--font-geist-sans",
    weight: "100 900",
});

const geistMono = localFont({
    src: "./fonts/GeistMonoVF.woff",
    variable: "--font-geist-mono",
    weight: "100 900",
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

async function getInitialData() {
    const token = await getRefreshToken();
    console.log("refreshToken: " + token)
    if (!token) {
        return { accessToken: null, userData: null };
    }
    try {

        const tokenResponse = await axios.post(
            `${process.env.NEXT_PUBLIC_BACKEND_ADDRESS}/user/access-token`,
            {token : token},
            {
                headers: {
                    'Content-Type': 'application/json'
                }
            }
        );

        if (!tokenResponse) {
            return { accessToken: null, userData: null };
        }

        const accessToken = tokenResponse.data.data.accessToken;

        const userResponse = await axios.get(`${process.env.NEXT_PUBLIC_BACKEND_ADDRESS}/user/get`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        if (!userResponse) {
            return { accessToken, userData: null };
        }

        const userData = await userResponse.data.data.user;
        return {
            accessToken,
            userData: {
                id: userData.id,
                fullName: userData.fullName,
                picture: null,
                pictureBase64: userData.picture,
                pictureType: userData.pictureType,
                description: userData.description ?? '',
                badges: userData.badges ?? [],
                badgesVisible: userData.badgesVisible ?? false,
                email: userData.email,
                points: userData.points,
                role: userData.role,
            }
        };
    } catch (error) {
        console.error('Error getting initial data:', error);
        return { accessToken: null, userData: null };
    }
}

export default async function RootLayout({
                                             children,
                                         }: Readonly<{
    children: ReactNode;
}>) {
    const { accessToken, userData } = await getInitialData();

    return (
        <html lang="en" suppressHydrationWarning>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`} suppressHydrationWarning>
        <StoreProvider
            initialAccessToken={accessToken}
            initialUserData={userData}
        >
            <Navbar/>
            {children}
        </StoreProvider>
        </body>
        </html>
    );
}